/*
 * Tencent is pleased to support the open source community by making 蓝鲸加解密Java SDK（crypto-java-sdk） available.
 *
 * Copyright (C) 2021 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * 蓝鲸加解密Java SDK（crypto-java-sdk） is licensed under the MIT License.
 *
 * License for 蓝鲸加解密Java SDK（crypto-java-sdk）:
 * --------------------------------------------------------------------
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
 * to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of
 * the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tencent.bk.sdk.crypto;

import com.tencent.bk.sdk.crypto.cryptor.ASymmetricCryptorFactory;
import com.tencent.bk.sdk.crypto.cryptor.SymmetricCryptorFactory;
import com.tencent.bk.sdk.crypto.cryptor.consts.CryptorNames;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;

import static org.junit.jupiter.api.Assertions.assertEquals;

class CryptorFactoryTest {

    @Test
    void testSymmetricCryptor() {
        testSymmetricCryptor(CryptorNames.NONE);
        testSymmetricCryptor(CryptorNames.AES);
        testSymmetricCryptor(CryptorNames.SM4);
    }

    void testSymmetricCryptor(String cryptorName) {

        Function<String, Integer> function = pCryptorName -> {
            try {
                SymmetricCryptorFactory.getCryptor(pCryptorName);
                return 0;
            } catch (Exception e) {
                return 1;
            }
        };
        int errorNum = runInMultiThreadsAndGetErrorNum(function, 100, cryptorName);
        System.out.println(errorNum + " thread fail to get SymmetricCryptor " + cryptorName);
        assertEquals(0, errorNum);
    }

    @Test
    void testASymmetricCryptor() {
        testASymmetricCryptor(CryptorNames.RSA);
        testASymmetricCryptor(CryptorNames.SM2);
    }

    void testASymmetricCryptor(String cryptorName) {
        Function<String, Integer> function = pCryptorName -> {
            try {
                ASymmetricCryptorFactory.getCryptor(pCryptorName);
                return 0;
            } catch (Exception e) {
                return 1;
            }
        };
        int errorNum = runInMultiThreadsAndGetErrorNum(function, 200, cryptorName);
        System.out.println(errorNum + " thread fail to get ASymmetricCryptor " + cryptorName);
        assertEquals(0, errorNum);
    }

    <T> int runInMultiThreadsAndGetErrorNum(Function<T, Integer> function, int threadNum, T param) {
        AtomicInteger finalResult = new AtomicInteger(0);
        List<Thread> threadList = new ArrayList<>(threadNum);
        for (int i = 0; i < threadNum; i++) {
            Thread t = new Thread(() -> {
                Integer result = function.apply(param);
                finalResult.addAndGet(result);
            });
            t.start();
            threadList.add(t);
        }
        threadList.forEach(thread -> {
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        return finalResult.get();
    }
}
