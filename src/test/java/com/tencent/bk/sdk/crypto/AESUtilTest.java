/*
 * Tencent is pleased to support the open source community by making 蓝鲸加解密Java SDK（crypto-java-sdk） available.
 *
 * Copyright (C) 2021 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * 蓝鲸加解密Java SDK（crypto-java-sdk） is licensed under the MIT License.
 *
 * License for 蓝鲸加解密Java SDK（crypto-java-sdk）:
 * --------------------------------------------------------------------
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
 * to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of
 * the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tencent.bk.sdk.crypto;

import com.tencent.bk.sdk.crypto.exception.CryptoException;
import com.tencent.bk.sdk.crypto.util.AESUtil;
import org.junit.jupiter.api.Test;

import java.nio.charset.StandardCharsets;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class AESUtilTest {

    private static final byte[] EMPTY_MESSAGE_BYTES = "".getBytes(StandardCharsets.UTF_8);
    private static final byte[] MESSAGE_BYTES = "test中文符号~!@#$%^&*()_+=-0987654321`[]{};:'\"<>?,./"
        .getBytes(StandardCharsets.UTF_8);
    private static final byte[] EMPTY_KEY_BYTES = "".getBytes(StandardCharsets.UTF_8);
    private static final byte[] KEY_BYTES = "中文符号~!@#$%^&*()test".getBytes(StandardCharsets.UTF_8);

    @SuppressWarnings("ConstantConditions")
    @Test
    void testEncryptAndDecrypt() throws Exception {
        // null message用例
        byte[] encryptedData = AESUtil.encrypt(null, KEY_BYTES);
        byte[] decryptedData = AESUtil.decrypt(encryptedData, KEY_BYTES);
        assertArrayEquals(null, decryptedData);

        // empty message用例
        encryptedData = AESUtil.encrypt(EMPTY_MESSAGE_BYTES, KEY_BYTES);
        decryptedData = AESUtil.decrypt(encryptedData, KEY_BYTES);
        assertArrayEquals(EMPTY_MESSAGE_BYTES, decryptedData);

        // 常规用例
        encryptedData = AESUtil.encrypt(MESSAGE_BYTES, KEY_BYTES);
        decryptedData = AESUtil.decrypt(encryptedData, KEY_BYTES);
        assertArrayEquals(MESSAGE_BYTES, decryptedData);

        // null key用例
        final byte[] finalEncryptedData = encryptedData.clone();
        assertThrows(CryptoException.class, () -> AESUtil.encrypt(MESSAGE_BYTES, null));
        assertThrows(CryptoException.class, () -> AESUtil.decrypt(finalEncryptedData, null));

        // empty key用例
        assertThrows(CryptoException.class, () -> AESUtil.encrypt(MESSAGE_BYTES, EMPTY_KEY_BYTES));
        assertThrows(CryptoException.class, () -> AESUtil.decrypt(finalEncryptedData, EMPTY_KEY_BYTES));
    }

}
