/*
 * Tencent is pleased to support the open source community by making 蓝鲸加解密Java SDK（crypto-java-sdk） available.
 *
 * Copyright (C) 2021 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * 蓝鲸加解密Java SDK（crypto-java-sdk） is licensed under the MIT License.
 *
 * License for 蓝鲸加解密Java SDK（crypto-java-sdk）:
 * --------------------------------------------------------------------
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
 * to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of
 * the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tencent.bk.sdk.crypto.util;

import com.tencent.bk.sdk.crypto.exception.SM2DecryptException;
import com.tencent.bk.sdk.crypto.exception.SM2EncryptException;
import com.tencent.bk.sdk.crypto.exception.SM2GenKeyPairException;
import com.tencent.kona.crypto.KonaCryptoProvider;
import com.tencent.kona.crypto.spec.SM2PrivateKeySpec;
import com.tencent.kona.crypto.spec.SM2PublicKeySpec;
import lombok.extern.slf4j.Slf4j;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.spec.InvalidKeySpecException;

import static com.tencent.kona.crypto.CryptoUtils.toHex;

/**
 * 国密非对称加密算法SM2相关操作工具类
 */
@Slf4j
public class SM2Util {

    /**
     * Kona加解密算法Provider名称
     */
    public static final String PROVIDER_NAME_KONA_CRYPTO = "KonaCrypto";
    /**
     * 加解密算法
     */
    private static final String ALGORITHM_SM2 = "SM2";

    static {
        KonaCryptoProvider konaCryptoProvider = new KonaCryptoProvider();
        if (null == Security.getProvider(konaCryptoProvider.getName())) {
            Security.addProvider(konaCryptoProvider);
        }
    }

    /**
     * 生成SM2密钥对
     *
     * @return 生成的SM2密钥对
     * @throws SM2GenKeyPairException 生成密钥对失败异常信息
     */
    public static KeyPair genKeyPair() {
        try {
            KeyPairGenerator keyPairGenerator
                = KeyPairGenerator.getInstance(ALGORITHM_SM2, PROVIDER_NAME_KONA_CRYPTO);
            return keyPairGenerator.generateKeyPair();
        } catch (Exception e) {
            throw new SM2GenKeyPairException("Fail to gen SM2 key pair", e);
        }
    }

    /**
     * 使用SM2公钥对明文内容进行加密
     *
     * @param publicKey SM2公钥字节数组
     * @param message   明文字节数组
     * @return 密文字节数组
     * @throws SM2EncryptException 加密失败异常信息
     */
    public static byte[] encrypt(byte[] publicKey, byte[] message) {
        try {
            return doEncrypt(publicKey, message);
        } catch (Exception e) {
            throw new SM2EncryptException("Fail to encrypt message using SM2", e);
        }
    }

    /**
     * 使用SM2公钥对明文内容进行加密
     *
     * @param publicKey SM2公钥
     * @param message   明文字节数组
     * @return 密文字节数组
     * @throws SM2EncryptException 加密失败异常信息
     */
    public static byte[] encrypt(PublicKey publicKey, byte[] message) {
        try {
            return doEncrypt(publicKey, message);
        } catch (Exception e) {
            throw new SM2EncryptException("Fail to encrypt message using SM2", e);
        }
    }

    /**
     * 使用SM2私钥对密文内容进行解密
     *
     * @param privateKey       SM2私钥字节数组
     * @param encryptedMessage 密文字节数组
     * @return 明文字节数组
     * @throws SM2DecryptException 解密失败异常信息
     */
    public static byte[] decrypt(byte[] privateKey, byte[] encryptedMessage) {
        try {
            return doDecrypt(privateKey, encryptedMessage);
        } catch (Exception e) {
            throw new SM2DecryptException("Fail to decrypt encryptedMessage using SM2", e);
        }
    }

    /**
     * 使用SM2私钥对密文内容进行解密
     *
     * @param privateKey       SM2私钥
     * @param encryptedMessage 密文字节数组
     * @return 明文字节数组
     * @throws SM2DecryptException 解密失败异常信息
     */
    public static byte[] decrypt(PrivateKey privateKey, byte[] encryptedMessage) {
        try {
            return doDecrypt(privateKey, encryptedMessage);
        } catch (Exception e) {
            throw new SM2DecryptException("Fail to decrypt encryptedMessage using SM2", e);
        }
    }

    private static byte[] doEncrypt(byte[] publicKey, byte[] message) throws NoSuchProviderException,
        NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException,
        BadPaddingException, IllegalBlockSizeException {
        KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM_SM2, PROVIDER_NAME_KONA_CRYPTO);
        SM2PublicKeySpec pubKeySpec = new SM2PublicKeySpec(publicKey);
        PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);
        return doEncrypt(pubKey, message);
    }

    private static byte[] doEncrypt(PublicKey publicKey, byte[] message) throws NoSuchProviderException,
        NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, BadPaddingException,
        IllegalBlockSizeException {
        Cipher cipher = Cipher.getInstance(ALGORITHM_SM2, PROVIDER_NAME_KONA_CRYPTO);

        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] encryptedMessage = cipher.doFinal(message);
        if (log.isDebugEnabled()) {
            log.debug(
                "publicKey=" + toHex(publicKey.getEncoded())
                    + ",message=" + toHex(message)
                    + ",encryptedMessage=" + toHex(encryptedMessage)
            );
        }
        return encryptedMessage;
    }

    private static byte[] doDecrypt(byte[] privateKey, byte[] encryptedMessage) throws NoSuchProviderException,
        NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException,
        BadPaddingException, IllegalBlockSizeException {
        KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM_SM2, PROVIDER_NAME_KONA_CRYPTO);
        SM2PrivateKeySpec privateKeySpec = new SM2PrivateKeySpec(privateKey);
        PrivateKey priKey = keyFactory.generatePrivate(privateKeySpec);
        return doDecrypt(priKey, encryptedMessage);
    }

    private static byte[] doDecrypt(PrivateKey privateKey, byte[] encryptedMessage) throws NoSuchProviderException,
        NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
        BadPaddingException, IllegalBlockSizeException {
        Cipher cipher = Cipher.getInstance(ALGORITHM_SM2, PROVIDER_NAME_KONA_CRYPTO);

        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] decryptedMessage = cipher.doFinal(encryptedMessage);
        if (log.isDebugEnabled()) {
            log.debug(
                "privateKey=" + toHex(privateKey.getEncoded())
                    + ",encryptedMessage=" + toHex(encryptedMessage)
                    + ",decryptedMessage=" + toHex(decryptedMessage)
            );
        }
        return decryptedMessage;
    }
}
