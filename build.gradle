/*
 * Tencent is pleased to support the open source community by making 蓝鲸加解密Java SDK（crypto-java-sdk） available.
 *
 * Copyright (C) 2021 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * 蓝鲸加解密Java SDK（crypto-java-sdk） is licensed under the MIT License.
 *
 * License for 蓝鲸加解密Java SDK（crypto-java-sdk）:
 * --------------------------------------------------------------------
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
 * to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of
 * the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    api 'com.tencent.kona:kona-crypto:1.0.8'
    api 'com.tencent.kona:kona-pkix:1.0.8'

    api 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    api 'org.apache.commons:commons-lang3:3.9'
    api 'commons-codec:commons-codec:1.14'
    api "org.slf4j:slf4j-api:1.7.30"
    api 'ch.qos.logback:logback-core:1.2.10'
    api 'ch.qos.logback:logback-classic:1.2.10'
    api "commons-io:commons-io:2.6"

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
    testImplementation 'ch.qos.logback:logback-core:1.2.10'
    testImplementation 'ch.qos.logback:logback-classic:1.2.10'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs.add '-parameters'
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

javadoc {
    description = "javadoc for crypto-java-sdk"
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = project.name
    // 不检查：非标的javadoc注解不报错
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption("charset", "UTF-8")
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
}

group = "com.tencent.bk.sdk"
version = "1.1.1"

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'crypto-java-sdk'
            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'crypto-java-sdk'
                description = 'Tencent BlueKing crypto-java-sdk project'
                url = 'https://github.com/TencentBlueKing/crypto-java-sdk'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/TencentBlueKing/crypto-java-sdk/blob/master/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'bk-job'
                        name = 'bk-job'
                        email = 'bk-job@tencent.com'
                        roles = ['Manager']
                    }
                }
                scm {
                    url = 'https://github.com/TencentBlueKing/crypto-java-sdk'
                    connection = 'scm:git:https://github.com/TencentBlueKing/crypto-java-sdk.git'
                    developerConnection = 'scm:git:git@github.com:TencentBlueKing/crypto-java-sdk.git'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'MavenCentral'
            // 正式包
            def mavenRepoDeployUrl = System.getProperty("mavenRepoDeployUrl")
            def mavenRepoUsername = System.getProperty("mavenRepoUsername")
            def mavenRepoPassword = System.getProperty("mavenRepoPassword")

            if (mavenRepoDeployUrl == null) {
                mavenRepoDeployUrl = System.getenv("build_mavenRepoDeployUrl")
            }

            if (mavenRepoUsername == null) {
                mavenRepoUsername = System.getenv("build_mavenRepoUsername")
            }

            if (mavenRepoPassword == null) {
                mavenRepoPassword = System.getenv("build_mavenRepoPassword")
            }

            // 快照包
            def snapshotMavenRepoDeployUrl = System.getProperty("snapshotMavenRepoDeployUrl")
            def snapshotMavenRepoUsername = System.getProperty("snapshotMavenRepoUsername")
            def snapshotMavenRepoPassword = System.getProperty("snapshotMavenRepoPassword")

            if (snapshotMavenRepoDeployUrl == null) {
                snapshotMavenRepoDeployUrl = System.getenv("build_snapshotMavenRepoDeployUrl")
            }

            if (snapshotMavenRepoUsername == null) {
                snapshotMavenRepoUsername = System.getenv("build_snapshotMavenRepoUsername")
            }

            if (snapshotMavenRepoPassword == null) {
                snapshotMavenRepoPassword = System.getenv("build_snapshotMavenRepoPassword")
            }

            url = System.getProperty("snapshot") == "true" ? snapshotMavenRepoDeployUrl : mavenRepoDeployUrl
            credentials {
                username = System.getProperty("snapshot") == "true" ? snapshotMavenRepoUsername : mavenRepoUsername
                password = System.getProperty("snapshot") == "true" ? snapshotMavenRepoPassword : mavenRepoPassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

publish.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
generateMetadataFileForMavenJavaPublication.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
generatePomFileForMavenJavaPublication.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
publishMavenJavaPublicationToMavenCentralRepository.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
publishMavenJavaPublicationToMavenLocal.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
publishToMavenLocal.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
signMavenJavaPublication.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
